package com.example.task.controller;

import com.example.task.proxy.Response;
import com.example.task.proxy.UserProxy;
import com.example.task.service.AdminService;
import com.example.task.domain.User;

import jakarta.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
//@RequestMapping("/admin")
public class AdminController {

	@Autowired
	private AdminService adminService;

	// 1. Get all users
	@GetMapping("/get-all-user-details")
	public ResponseEntity<?> getAllUsers() {
		List<UserProxy> users = adminService.getAllusers();

		if (users != null && !users.isEmpty())
			return new ResponseEntity<>(users, HttpStatus.OK);
		else
			return new ResponseEntity<>(new Response("No user records found.", HttpStatus.NOT_FOUND.toString()),
					HttpStatus.NOT_FOUND);
	}

	// 2. Get user by username
	@GetMapping("/get-user-by-username/{username}")
	public ResponseEntity<?> getUserByUsername(@Valid @PathVariable("username") String username) {
		try {
			User user = adminService.getUserByUsername(username);
			return new ResponseEntity<>(user, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(
					new Response("User not found with given username.", HttpStatus.NOT_FOUND.toString()),
					HttpStatus.NOT_FOUND);
		}
	}

	// 3. Update user by username
	@PostMapping("/update-user-by-username")
	public ResponseEntity<?> updateUserByUsername(@Valid @RequestBody UserProxy userProxy,
			BindingResult bindingResult) {
		if (bindingResult.hasErrors()) {
			List<String> errors = bindingResult.getFieldErrors().stream().map(error -> error.getDefaultMessage())
					.collect(Collectors.toList());
			return new ResponseEntity<>(new Response(errors.toString(), HttpStatus.BAD_REQUEST.toString()),
					HttpStatus.BAD_REQUEST);
		}

		try {
			String result = adminService.updateUser(userProxy, userProxy.getUsername());
			return new ResponseEntity<>(new Response(result, HttpStatus.OK.toString()), HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(
					new Response("User not found with given username.", HttpStatus.NOT_FOUND.toString()),
					HttpStatus.NOT_FOUND);
		}
	}

	// 4. Delete user by username
	@GetMapping("/delete-user-by-username/{username}")
	public ResponseEntity<?> deleteUserByUsername(@Valid @PathVariable("username") String username) {
		try {
			String result = adminService.deleteUser(username);
			return new ResponseEntity<>(new Response(result, HttpStatus.OK.toString()), HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(
					new Response("User not found with given username.", HttpStatus.NOT_FOUND.toString()),
					HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/get-all-users-pagewise")
	public ResponseEntity<?> getAllUsersPageWise(@RequestParam(defaultValue = "0") int page,
			@RequestParam(defaultValue = "10") int size) {

		Page<UserProxy> usersPage = adminService.getAllUsersPageWise(PageRequest.of(page, size));

		if (usersPage.hasContent()) {
			return new ResponseEntity<>(usersPage, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(
					new Response("No users found for the given page.", HttpStatus.NOT_FOUND.toString()),
					HttpStatus.NOT_FOUND);
		}
	}

	@PostMapping("/forgot-password")
	public ResponseEntity<?> forgotPassword(@Valid @RequestBody String email) {
		String s = service.forgotPassword(email);

		if (s.equals("A password reset link has been sent to your registered email address. "
				+ "Please check your inbox and follow the instructions to reset your password."))
			return new ResponseEntity<>(new Response(s, HttpStatus.OK.toString()), HttpStatus.OK);

		return new ResponseEntity<>(new Response(s, HttpStatus.BAD_REQUEST.toString()), HttpStatus.BAD_REQUEST);
	}

	@PostMapping("/reset-password/{username}/{timestamp}/{token}")
	public ResponseEntity<?> resetPassword(@Valid @PathVariable("username") String username,
			@PathVariable("timestamp") String timestamp, @PathVariable("token") String token,
			@RequestBody ResetPassword proxy) {
		try {
			// Pass username and token to service for processing
			String s = service.resetPassword(username, timestamp, token, proxy);

			if (s.equals("Password not matching.") || s.equals("Username in token does not match provided username!")
					|| s.equals("Token is expired, please request again to reset your password!")
					|| s.equals("User was not found to perform this action!")) {
				return new ResponseEntity<>(new Response(s, HttpStatus.BAD_REQUEST.toString()), HttpStatus.BAD_REQUEST);
			}

			return new ResponseEntity<>(new Response(s, HttpStatus.OK.toString()), HttpStatus.OK);

		} catch (IllegalArgumentException e) {
			return new ResponseEntity<>(new Response("Invalid token format.", HttpStatus.BAD_REQUEST.toString()),
					HttpStatus.BAD_REQUEST);
		}
	}
}
