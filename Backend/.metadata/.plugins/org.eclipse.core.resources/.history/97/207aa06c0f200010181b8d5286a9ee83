package com.example.task.controller;

import com.example.task.proxy.Response;
import com.example.task.proxy.UserProxy;
import com.example.task.service.AdminService;
import com.example.task.domain.User;

import jakarta.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/admin")
public class AdminController {

	@Autowired
	private AdminService adminService;

	// 1. Get all users
	@GetMapping("/get-all-user-details")
	public ResponseEntity<?> getAllUsers() {
		List<UserProxy> users = adminService.getAllusers();

		if (users != null && !users.isEmpty())
			return new ResponseEntity<>(users, HttpStatus.OK);
		else
			return new ResponseEntity<>(new Response("No user records found.", HttpStatus.NOT_FOUND.toString()),
					HttpStatus.NOT_FOUND);
	}

	// 2. Get user by username
	@GetMapping("/get-user-by-username/{username}")
	public ResponseEntity<?> getUserByUsername(@Valid @PathVariable("username") String username) {
		try {
			User user = adminService.getUserByUsername(username);
			return new ResponseEntity<>(user, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(
					new Response("User not found with given username.", HttpStatus.NOT_FOUND.toString()),
					HttpStatus.NOT_FOUND);
		}
	}

	// 3. Update user by username
	@PostMapping("/update-user-by-username")
	public ResponseEntity<?> updateUserByUsername(@Valid @RequestBody UserProxy userProxy,
			BindingResult bindingResult) {
		if (bindingResult.hasErrors()) {
			List<String> errors = bindingResult.getFieldErrors().stream().map(error -> error.getDefaultMessage())
					.collect(Collectors.toList());
			return new ResponseEntity<>(new Response(errors.toString(), HttpStatus.BAD_REQUEST.toString()),
					HttpStatus.BAD_REQUEST);
		}

		try {
			String result = adminService.updateUser(userProxy, userProxy.getUsername());
			return new ResponseEntity<>(new Response(result, HttpStatus.OK.toString()), HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(
					new Response("User not found with given username.", HttpStatus.NOT_FOUND.toString()),
					HttpStatus.NOT_FOUND);
		}
	}

	// 4. Delete user by username
	@GetMapping("/delete-user-by-username/{username}")
	public ResponseEntity<?> deleteUserByUsername(@Valid @PathVariable("username") String username) {
		try {
			String result = adminService.deleteUser(username);
			return new ResponseEntity<>(new Response(result, HttpStatus.OK.toString()), HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(
					new Response("User not found with given username.", HttpStatus.NOT_FOUND.toString()),
					HttpStatus.NOT_FOUND);
		}
	}
}
